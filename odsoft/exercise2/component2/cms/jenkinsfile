pipeline {

    environment {
        projectDir = 'odsoft/exercise2/component2/cms'
        repository = 'bitbucket.org/mei-isep/odsoft-18-19-ifp-g114.git'
        credentials = 'a1e7ee23-40f2-46fe-82d5-048f0790e80e'
    }

    agent any

    stages {
        
    	stage('Checkout') {
            steps {
           		checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'AuthorInChangelog']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${credentials}", url: "https://rafael95@${repository}"]]])
            }
    	}
    
    	stage('Preparation') {
    	    steps {
                script {
                    if (isUnix()) {
                        dir("${projectDir}") {sh './gradlew cleanTest cleanIntegrationTest cleanJacocoTestReport cleanJacocoIntegrationReport'}
                    } else {
                        dir("${projectDir}") {bat 'gradlew.bat cleanTest cleanIntegrationTest cleanJacocoTestReport cleanJacocoIntegrationReport'}
                    }
                }
    	    }
        }
    
    	stage('Build') {
            steps {
                script{
                    if (isUnix()) {
                    	dir("${projectDir}") {sh './gradlew build'}
                    } else {
                    	dir("${projectDir}") {bat 'gradlew.bat build'}
                    }
                }
            }
    	}

        stage("Archive War, Generate/Publish Javadoc and Run Tests") {
            parallel {
                
                stage('Archive war file') {
                    steps {
                        archiveArtifacts allowEmptyArchive: true, artifacts: "${projectDir}/build/libs/*.war", fingerprint: true, onlyIfSuccessful: true
                    }
                }
    
                stage('Javadoc') {
                    steps {
                        script {
                            if (isUnix()) {
                                dir("${projectDir}") {sh './gradlew javadoc'}
                            } else {
                                dir("${projectDir}") {bat 'gradlew.bat javadoc'}
                            }
                        }
                
                        step([$class: 'JavadocArchiver', javadocDir: "${projectDir}/build/docs/javadoc", keepAll: false])
                    }
                }
    
                stage('Unit Tests') {
                    steps {
                        script {
                            if (isUnix()) {
                                dir("${projectDir}") {sh './gradlew test'}
                            } else {
                                dir("${projectDir}") {bat 'gradlew.bat test'}
                            }
                        }
                    }
                }
    
                stage('Integration Tests') {
                    steps {
                        script {
                            if (isUnix()) {
                                dir("${projectDir}") {sh './gradlew integrationTest'}
                            } else {
                                dir("${projectDir}") {bat 'gradlew.bat integrationTest'}
                            }
                        }
                    }
                }

                stage('Mutation Tests') {
                    steps {
                        /*
                        script {
                            if (isUnix()) {
                                dir("${projectDir}") {sh './gradlew mutationTest'}
                            } else {
                                dir("${projectDir}") {bat 'gradlew.bat mutationTest'}
                            }
                        }
                        */
                        
                        echo "mutation tests under construction"
                    }
                }
            
                stage('System Tests') {
                    steps {
                        /*
                        script {
                            if (isUnix()) {
                                dir("${projectDir}") {sh './gradlew systemTest'}
                            } else {
                                dir("${projectDir}") {bat 'gradlew.bat systemTest'}
                            }
                        }
                        */

                        echo "system tests under construction"
                    }
                }
            }
        }

        stage('Publish Tests Report') {
            steps {
                junit allowEmptyResults: true, testResults: "${projectDir}/build/test-results/test/*.xml"
            }
        }

        stage('Publish Integration Tests Report') {
            steps {
                junit allowEmptyResults: true, testResults: "${projectDir}/build/test-results/integrationTest/*.xml"
            }
        }

        stage('Publish Coverage Report') {
            steps {
                jacoco classPattern: "${projectDir}/build/classes", exclusionPattern: '**/*Test*.class', execPattern: "${projectDir}/build/jacoco/*.exec", sourceExclusionPattern: '**/*Test*.java', sourcePattern: "${projectDir}/src/main/java"
            }
        }
    
        stage('Deploy'){
            steps {
                script {
                    if (isUnix()) {
                        dir("${projectDir}") {
                            sh './gradlew deploy'
                            sh 'startup.sh'
                            sleep(3)
                        }
                    } else {
                        dir("${projectDir}") {
                            bat 'gradlew.bat deploy'
                            bat 'startup.bat'
                            sleep(3)
                        }
                    }
                }
            }
        }
    
        stage('Smoke Tests') {
            options {
                retry(5)
            }
            steps {
                // to allow Tomcat to deploy the app
                sleep(3)
                script {
                    if (isUnix()) {
                        dir("${projectDir}") {sh 'curl http://localhost:8080/cms-1.0/#!CwContacts'}
                    } else {
                        dir("${projectDir}") {bat 'curl http://localhost:8080/cms-1.0/#!CwContacts'}
                    }
                }
            }
        }

        stage('Manual UI Acceptance Tests') {
            options {
                timeout(time: 1, unit: 'HOURS')
            }
            steps {
                /*
                emailext body: '''Please do some testing and approve the build on jenkins

CHOP CHOP! Get to work!''', recipientProviders: [developers(), culprits()], subject: 'Manual Tests', to: '1141233@isep.ipp.pt'
                */

                input 'Please Approve or fail the build after UI Acceptance Tests'
            }
        }

        stage('Continuous Integration Feedback') {
            steps {
                withCredentials([[$class: 'UsernamePasswordMultiBinding',
                    credentialsId: "${credentials}",
                    usernameVariable: 'GIT_USERNAME', 
                    passwordVariable: 'GIT_PASSWORD']]) {

                    script {
                        if (isUnix()) {
                            dir("${projectDir}") {
                                sh "git tag Build#${BUILD_NUMBER}-${currentBuild.currentResult}"
                                sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repository} --tags"
                            }
                        } else {
                            dir("${projectDir}") {
                                bat "git tag Build#${BUILD_NUMBER}-${currentBuild.currentResult}"
                                bat "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repository} --tags"
                            }
                        }
                    }
                }
            }
        }

        stage('Cleanup') {
            steps {
                cleanWs notFailBuild: true
            }
        }

    }
}