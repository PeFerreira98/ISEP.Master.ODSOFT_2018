#!/usr/bin/env groovy

pipeline{

    environment{
        repoUrl = 'https://PeFerreira98@bitbucket.org/mei-isep/odsoft-18-19-ifp-g114.git'
        workPath = 'odsoft/exercise2/component3/cms/'
        credentials = 'BitbucketAuth'
    }

    agent any

    stages{

        stage("GitCheckout"){
            steps{
                echo 'Checkout..'
                //checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${credentials}", url: "${repoUrl}"]]])  
                checkout scm
            }
        }
        
        stage('Clean'){
            steps{
                echo 'Cleaning..'
                dir("${workPath}"){
                    script{
                        if (isUnix()) sh './gradlew clean --info'
                        else bat 'gradlew clean --info'                        
                    }
                }                
            }
        }
            
        stage('Build'){
            steps{
                echo 'Building..'
                dir("${workPath}"){
                    script{
                        if (isUnix()) sh './gradlew build --info'
                        else bat 'gradlew build --info'
                    }
                }
            }			
        }
        
        stage('Unit Tests'){
            steps{
                echo 'Unit Testing..'
                dir("${workPath}"){
                    script{
                        if (isUnix()) sh './gradlew test --info'
                        else bat 'gradlew test --info'
                    }
                }
            }	
        }

        stage('Test Publish'){
            steps{
                echo 'Publishing Tests..'
                dir("${workPath}"){
                    script{
                        if (isUnix()) sh './gradlew jacocoTestReport --info'
                        else bat 'gradlew jacocoTestReport --info'
                    }
                    junit allowEmptyResults: true, testResults: "build/test-results/test/*.xml"
                    jacoco classPattern: "build/classes", exclusionPattern: '**/*Test*.class', execPattern: "build/jacoco/test.exec", sourceExclusionPattern: '**/*Test*.java', sourcePattern: "src/main/java"
                }
            }
        }
        
        stage('Integration Tests'){
            steps{
                echo 'Integration Testing..'
                dir("${workPath}"){
                    script{
                        if (isUnix()) sh './gradlew integrationTest --info'
                        else bat 'gradlew integrationTest --info'
                    }
                }
            }	
        }

        stage('Integration Test Publish'){
            steps{
                echo 'Publishing Jacoco test coverage..'
                dir("${workPath}"){
                    script{
                        if (isUnix()) sh './gradlew jacocoIntegrationReport --info'
                        else bat 'gradlew jacocoIntegrationReport --info'
                    }
                    junit allowEmptyResults: true, testResults: "build/test-results/integrationTest/*.xml"
                    jacoco classPattern: "build/classes", exclusionPattern: '**/*Test*.class', execPattern: "build/jacoco/integrationTest.exec", sourceExclusionPattern: '**/*Test*.java', sourcePattern: "src/main/java"
                }
            }
        }

        stage('Mutation Tests'){
            steps{
                echo 'Mutation Testing..'
                dir("${workPath}"){
                    script{
                        if (isUnix()) sh './gradlew pitest --info'
                        else bat 'gradlew pitest --info'
                    }
                }
            }	
        }

        stage('Mutation Test Publish'){
            steps{
                echo 'Publishing Mutation test coverage..'
                dir("${workPath}"){
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "build/reports/pitest", reportFiles: 'index.html', reportName: 'Mutation Report', reportTitles: 'Mutation Report'])
                }
            }
        }
        
        stage('Javadoc Generation'){
            steps{
                echo 'Generating Javadoc..'
                dir("${workPath}"){
                    script{
                        if (isUnix()) sh './gradlew javadoc --info'
                        else bat 'gradlew javadoc --info'
                    }
                }
            }	
        }

        stage('Javadoc Publish'){
            steps{
                echo 'Publishing Javadoc..'
                dir("${workPath}"){
                    step([$class: 'JavadocArchiver', javadocDir: "build/docs/javadoc", keepAll: false])
                }
            }
        }
        
        stage('Archiving Artifacts'){
            steps{
                echo 'Archiving Artefacts..'
                dir("${workPath}"){
                    archiveArtifacts allowEmptyArchive: true, artifacts: "build/libs/*.war", fingerprint: true, onlyIfSuccessful: true
                }
            }
        }

        stage('Deploy'){
            //when { tag "release-*" }
            steps{
                echo 'Deploy App..'
                dir("${workPath}"){
                    script{
                        if (isUnix()) sh './gradlew deploy --info && %CATALINA_HOME%/bin/startup.sh' //check if works. ex -> echo $TEST_VAR
                        else bat 'gradlew deploy --info && %CATALINA_HOME%/bin/startup.bat'
                    }
                }
                sleep(3)
            }
        }

        stage('System Tests'){
            //when { tag "release-*" }
            steps{
                dir("${workPath}"){
                    script{
                        if (isUnix()) sh 'curl http://localhost:8080/cms'
                        else powershell 'Invoke-RestMethod -Uri http://localhost:8080/cms'
                    }
                }                
            }
        }

        stage('Manual UI Acceptance Tests'){
            options{
                timeout(time: 1, unit: 'HOURS')
            }

            steps{
                mail (to: '1140953@isep.ipp.pt 1141233@isep.ipp.pt', subject: "Manual Tests", body: "Please do some testing and approve the build on jenkins. CHOP CHOP! Get to work!")
                //input 'Please Approve or fail the build after UI Acceptance Tests'
            }
        }

    }

    post {
        success{
            bitbucketStatusNotify(buildState: 'SUCCESSFUL')
            discordSend description: 'Jenkins Pipeline Build Exercise 2 Component 3 - SUCCESS', result: currentBuild.currentResult, image: 'https://media.giphy.com/media/fQogXfHt0uIgyOCXDo/giphy.gif', webhookURL: 'https://discordapp.com/api/webhooks/514846042005569537/yWTNJnwN-pdceFvll4LofJ1ihg4BDho8Vg_g27DaU_jipQWjld8endZ_3CbzJcqVN9fo'
        }

        failure{
            bitbucketStatusNotify(buildState: 'FAILED')
            discordSend description: 'Jenkins Pipeline Build Exercise 2 Component 3 - FAILURE', result: currentBuild.currentResult, image: 'https://media.giphy.com/media/NTur7XlVDUdqM/giphy.gif', webhookURL: 'https://discordapp.com/api/webhooks/514846042005569537/yWTNJnwN-pdceFvll4LofJ1ihg4BDho8Vg_g27DaU_jipQWjld8endZ_3CbzJcqVN9fo'
        }

        always{
            mail (to: '1140953@isep.ipp.pt', subject: "Job exe2 comp3 build is finished", body: "Please go to Jenkins 2 see")
            /*
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                credentialsId: "${credentials}",
                usernameVariable: 'GIT_USERNAME', 
                passwordVariable: 'GIT_PASSWORD']]) {

                script 
                {
                    dir("${workPath}"){
                        if (isUnix()) 
                        {
                            sh "git tag Build#${BUILD_NUMBER}-${currentBuild.currentResult}"
                            sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} --tags"
                        } 
                        else 
                        {
                            powershell "git tag Build#${BUILD_NUMBER}-${currentBuild.currentResult}"
                            powershell "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} --tags"
                        }
                    }
                    
                }
            }
            */
        }

    }
}