plugins {
    id "fr.putnami.gwt" version "0.4.0"
    id "info.solidsoft.pitest" version "1.3.0"
    id "org.sonarqube" version "2.6"
   id "checkstyle"
   id "findbugs"
}

apply plugin: 'war'
apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'jacoco'
apply plugin: 'checkstyle'
apply plugin: 'findbugs'

//Java version compatibility to use when compiling Java source.
sourceCompatibility = 1.8
//Java version to generate classes for.
targetCompatibility = 1.8
//Script Version
version = '1.0'

repositories { 
	mavenCentral() 
}

dependencies {
 	testCompile 'junit:junit:4.12'
 	testCompile 'org.easymock:easymock:2.5.2'
	testCompile 'com.google.gwt:gwt-dev:2.8.2'
}

// If we want to use the default ant build inside gradle
// ant.importBuild "build.xml"

putnami{

	module 'pt.isep.cms.Showcase'
	//module 'com.google.gwt.sample.contacts.Contacts'
	
	/** add gwt nature on eclipse project. require apply plugin: 'eclipse' to work. default : false*/
	googlePluginEclipse = true
	
	gwtVersion='2.8.2'
	
	compile {
		sourceLevel = '1.8'
	}
	
	jetty {
        /** enable debugging. */
        debugJava = true
        /** debug port to listen. */
        debugPort = 8000
        /** wait for debugger attachment. */
        debugSuspend = false
    }
}

// Jacoco
jacocoTestReport {
    reports {
        xml.enabled false
        csv.enabled false
    }
}

// This task generates the coverage report for the integration tests.
// Notice that it only includes data about the server code since Jaccoco is not able to get data about cliente code that is transpiled to javascript
task jacocoIntegrationReport(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
	sourceSets sourceSets.main
	
    executionData = files("${buildDir}/jacoco/integrationTest.exec")
    
    reports {
        html.enabled = true
        xml.enabled = false
        csv.enabled = false
    }
}

tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// Unit Tests
test {
    ignoreFailures = true

	filter { 
		//all JRE unit tests, by naming convention
      	includeTestsMatching "*JRETest*"
	}
    jacoco { 
		append = true
		enabled = true
  		//classDumpFile = file("${buildDir}/jacoco/classpathdumps")
    }	
}

// Integration Tests
task integrationTest(type: Test) {
    ignoreFailures = true

	filter { 
		//all GWT unit tests, by naming convention
      	includeTestsMatching "*GWTTest*"
	}    
    jacoco { 
		append = true
		enabled = true
		//classDumpFile = file("${buildDir}/jacoco/classpathdumps")
		
		excludes = ["com/steadystate/**"] 
    }
    // These Properties are required to run gwt integration tests
    systemProperties['gwt.args'] = "-devMode -logLevel WARN -war www-test"
}

// Mutation Tests
pitest {
    pitestVersion = "1.3.0"
    targetClasses = ["pt.isep.cms.contacts.*","pt.isep.cms.students.*"] 
    excludedClasses =["pt.isep.cms.contacts.client.*", "pt.isep.cms.students.client.*"] 
    outputFormats=['HTML']
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    jvmArgs = ['-Xmx1024m']
    useClasspathFile = true    
    timestampedReports = false
}

javadoc {
    group "docs"
    description "Javadoc generation"

    dependsOn = ['renderPlantUml']

    source = sourceSets.main.allJava
    options.addStringOption("sourcepath", "")
    options.overview = "src/main/javadoc/overview.html" // relative to source root
    //options.addBooleanOption('html5', true)
}

task renderPlantUml(type: RenderPlantUmlTask) {}

war {
    archiveName 'cmsProject.war'
}

task deploy(type: Copy) {
    dependsOn = ['war']
    
	from "build/libs"
	into "${System.env.CATALINA_HOME}/webapps"
}

/**/
// Code quality
checkstyle {
    ignoreFailures = true
    toolVersion '7.8.1'
    configFile file("checkstyle.xml")
}

checkstyleMain {
    source ='src/main/java'
}

checkstyleTest {
    source ='src/test/java'
}

findbugs {
    ignoreFailures = true
    toolVersion = "3.0.1"
    sourceSets=[sourceSets.main]
    //excludeFilter = file("excludeFilter.xml")
    reportsDir = file("$project.buildDir/reports/findbugs")
    effort = "max"
}

findbugsMain {
    source ='src/main/java'
}

findbugsTest {
    dependsOn = ['build']
    source ='src/test/java'
}
