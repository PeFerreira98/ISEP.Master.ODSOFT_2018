#!/usr/bin/env groovy

pipeline 
{
    environment 
    {
        // Repository
        credentials = 'BitbucketAuth'
        repoUrl = "https://${repoUser}@bitbucket.org/mei-isep/odsoft-18-19-ifp-g114.git"

        projectDir = 'odsoft/project/cms'

        // Discord Webhook for some fancy stuff
        discordWebHook = 'https://discordapp.com/api/webhooks/514846042005569537/yWTNJnwN-pdceFvll4LofJ1ihg4BDho8Vg_g27DaU_jipQWjld8endZ_3CbzJcqVN9fo'
    }

    agent any

    stages 
    {
    	stage('Checkout') 
        {
            steps 
            {
                checkout scm
                // keep this commented in source control for Jenkins Automatic Jobs to succeed. 
           		//checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'AuthorInChangelog']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${credentials}", url: "https://rafael95@${repository}"]]])
            }
    	}
    
    	stage('Preparation') 
        {
    	    steps 
            {
                discordSend description: "Jenkins CMS Pipeline - Started Build #${BUILD_NUMBER}", result: currentBuild.currentResult, webhookURL: "${discordWebHook}"
            
                dir("${projectDir}") 
                {
                    script 
                    {
                        if (isUnix()) 
                        {
                            sh './gradlew cleanTest cleanIntegrationTest cleanJacocoTestReport cleanJacocoIntegrationReport cleanPitest'
                        } 
                        else 
                        {
                            bat 'gradlew.bat cleanTest cleanIntegrationTest cleanJacocoTestReport cleanJacocoIntegrationReport cleanPitest'
                        }
                    }
                }
                
    	    }
        }
    
    	stage('Build') 
        {
            steps 
            {
                dir("${projectDir}") 
                {
                    script
                    {
                        if (isUnix()) 
                        {
                            sh './gradlew build'
                        } else {
                            bat 'gradlew.bat build'
                        }
                    }
                }
            }
    	}

        stage("Archive War, Generate/Publish Javadoc, Run Tests/Publish Reports and Code Quality Analysis") 
        {
            parallel 
            {
                stage('Archive war file') 
                {
                    steps 
                    {
                        archiveArtifacts allowEmptyArchive: true, artifacts: "${projectDir}/build/libs/*.war", fingerprint: true, onlyIfSuccessful: true
                    }
                }
    
                stage('Javadoc')
                {
                    steps 
                    {
                        dir("${projectDir}") 
                        {
                            script
                            {
                                if (isUnix()) 
                                {
                                    sh './gradlew javadoc'
                                } 
                                else 
                                {
                                    bat 'gradlew.bat javadoc'
                                }
                            }
                        }
                
                        step([$class: 'JavadocArchiver', javadocDir: "${projectDir}/build/docs/javadoc", keepAll: false])
                    }
                }
    
                stage('Unit Tests') 
                {
                    steps 
                    {
                        dir("${projectDir}") 
                        {
                            script 
                            {
                                if (isUnix()) 
                                {
                                    sh './gradlew test jacocoTestReport'
                                } 
                                else 
                                {
                                    bat 'gradlew.bat test jacocoTestReport'
                                }
                            }   
                        }

                        junit allowEmptyResults: true, testResults: "${projectDir}/build/test-results/test/*.xml"

                        jacoco classPattern: "${projectDir}/build/classes", exclusionPattern: '**/client/*.class, **/*Test*.class', execPattern: "${projectDir}/build/jacoco/test.exec", sourceExclusionPattern: '**/client/*.java, **/*Test*.java', sourcePattern: "${projectDir}/src/main/java"
                    }
                }
    
                stage('Integration Tests')
                {
                    steps 
                    {
                        dir("${projectDir}") 
                        {
                            script 
                            {
                                if (isUnix()) 
                                {
                                    sh './gradlew integrationTest jacocoIntegrationReport'
                                } 
                                else 
                                {
                                    bat 'gradlew.bat integrationTest jacocoIntegrationReport'
                                }
                            }
                        }

                        junit allowEmptyResults: true, testResults: "${projectDir}/build/test-results/integrationTest/*.xml"

                        jacoco classPattern: "${projectDir}/build/classes", exclusionPattern: '**/client/*.class, **/*Test*.class', execPattern: "${projectDir}/build/jacoco/integrationTest.exec", sourceExclusionPattern: '**/client/*.java, **/*Test*.java', sourcePattern: "${projectDir}/src/main/java"
                    }
                }

                stage('Mutation Tests') 
                {
                    steps 
                    {
                        dir("${projectDir}") 
                        {
                            script 
                            {
                                if (isUnix()) 
                                {
                                    sh './gradlew pitest'
                                } 
                                else 
                                {
                                    bat 'gradlew.bat pitest'
                                }
                            }
                        }

                        publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "${projectDir}/build/reports/pitest", reportFiles: 'index.html', reportName: 'Mutation Report', reportTitles: 'Mutation Report'])
                    }
                }
            }
        }

        stage('Deploy')
        {
            steps 
            {
                dir("${projectDir}") 
                {
                    script 
                    {
                        if (isUnix()) 
                        {
                            sh './gradlew deploy'
                            sh '%CATALINA_HOME%/bin/startup.sh'
                        } 
                        else 
                        {
                            bat 'gradlew.bat deploy'
                            bat '%CATALINA_HOME%/bin/startup.bat'
                        }

                        //bat 'docker build -f Dockerfile -t cmsproject .'
                        //bat 'docker run -p 8888:8080 -t cmsproject'
                    }
                }
            }
        }

        stage('Deploy for Testing')
        {
            steps
            {
                echo 'Deploy App..'
                dir("${workPath}")
                {
                    script
                    {
                        //bound 2 change
                        if (isUnix()) sh './gradlew deploy --info && %CATALINA_HOME%/bin/startup.sh' //check if works. ex -> echo $TEST_VAR
                        else bat 'gradlew deploy --info && %CATALINA_HOME%/bin/startup.bat'
                    
                        //if (isUnix()) sh './gradlew deploy --info && startup.sh'
                        //else bat 'gradlew deploy --info && startup.bat'

                        //bat 'docker build -f Dockerfile -t cmsproject .'
                        //bat 'docker run -p 8888:8080 -t cmsproject'
                    }
                }
            }
        }

        stage('System Tests') 
        {
            options 
            {
                retry(5)
            }

            steps 
            {
                // to allow Tomcat to finish deploying the app
                sleep(3)

                dir("${projectDir}") 
                {
                    script 
                    {
                        if (isUnix()) 
                        {
                            sh 'curl http://localhost:8080/cms'
                        } 
                        else 
                        {
                            powershell 'Invoke-RestMethod -Uri http://localhost:8080/cms'
                        }
                    }
                }
            }
        }

        stage('Manual UI Acceptance Tests') 
        {
            options 
            {
                timeout(time: 1, unit: 'HOURS')
            }

            steps 
            {
                mail (to: '1140953@isep.ipp.pt 1141233@isep.ipp.pt', subject: "Manual Tests", body: "Please do some testing and approve the build on jenkins. CHOP CHOP! Get to work!")

                // input 'Please Approve or fail the build after UI Acceptance Tests'

                withCredentials([[$class: 'UsernamePasswordMultiBinding',
                credentialsId: "${credentials}",
                usernameVariable: 'GIT_USERNAME', 
                passwordVariable: 'GIT_PASSWORD']]) {

                    script 
                    {
                        dir("${workPath}"){
                            if (isUnix()) 
                            {
                                sh "git tag release"
                                sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} --tags"
                            } 
                            else 
                            {
                                powershell "git tag Build#${BUILD_NUMBER}-${currentBuild.currentResult}"
                                powershell "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} --tags"
                            }
                        }
                        
                    }
                }
            }
        }

        stage('Deploy Release')
        {
            when
            { 
                tag "release-*"
            }

            steps
            {
                echo 'Deploy App..'
                dir("${workPath}")
                {
                    script
                    {
                        //bound 2 change
                        if (isUnix()) sh './gradlew deploy --info && %CATALINA_HOME%/bin/startup.sh' //check if works. ex -> echo $TEST_VAR
                        else bat 'gradlew deploy --info && %CATALINA_HOME%/bin/startup.bat'
                    
                        //if (isUnix()) sh './gradlew deploy --info && startup.sh'
                        //else bat 'gradlew deploy --info && startup.bat'

                        //bat 'docker build -f Dockerfile -t cmsproject .'
                        //bat 'docker run -p 8888:8080 -t cmsproject'
                    }
                }
            }
        }
    }

    post
    {
        always 
        {
            discordSend description: "Jenkins CMS Pipeline - Finished Build #${BUILD_NUMBER}\nBuild Status: ${currentBuild.currentResult}", result: currentBuild.currentResult, webhookURL: "${discordWebHook}"
            
            //bitbucketStatusNotify(buildState: currentBuild.currentResult)
            
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                credentialsId: "${credentials}",
                usernameVariable: 'GIT_USERNAME', 
                passwordVariable: 'GIT_PASSWORD']]) {

                script 
                {
                    dir("${projectDir}") 
                    {
                        if (isUnix()) 
                        {
                            sh "git tag Build#${BUILD_NUMBER}-${currentBuild.currentResult}"
                            sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repository} --tags"
                        } 
                        else 
                        {
                            powershell "git tag Build#${BUILD_NUMBER}-${currentBuild.currentResult}"
                            powershell "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repository} --tags"
                        }  
                    }
                }
            }
        }
    }
}
