#!/usr/bin/env groovy

pipeline
{
    environment
    {
        // Repository
        credentials = 'BitbucketAuth'
        repoUrl = "https://${repoUser}@bitbucket.org/mei-isep/odsoft-18-19-ifp-g114.git"

        workPath = 'project/cms/'

        // Discord Webhook for some fancy stuff
        discordWebHook = 'https://discordapp.com/api/webhooks/514846042005569537/yWTNJnwN-pdceFvll4LofJ1ihg4BDho8Vg_g27DaU_jipQWjld8endZ_3CbzJcqVN9fo'
    }
    
    agent any

    stages
    {
        stage("GitCheckout")
        {
            steps
            {
                echo 'Checkout..'
                // keep this commented in source control for Jenkins Automatic Jobs to succeed. 
                // when using script in Jenkins, comment scm and uncomment normal checkout
                
                //checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: "${credentials}", url: "${repoUrl}"]]])  
                checkout scm
            }
        }
        
        stage('Clean')
        {
            steps{
                echo 'Cleaning..'
                dir("${workPath}")
                {
                    script
                    {
                        // if (isUnix()) sh './gradlew clean --info'
                        // else bat 'gradlew clean --info'  

                        if (isUnix()) sh './gradlew cleanTest cleanIntegrationTest cleanJacocoTestReport cleanJacocoIntegrationReport cleanPitest --info'
                        else bat 'gradlew cleanTest cleanIntegrationTest cleanJacocoTestReport cleanJacocoIntegrationReport cleanPitest --info'                        
                    }
                }                
            }
        }
            
        stage('Build')
        {
            steps
            {
                echo 'Building..'
                dir("${workPath}")
                {
                    script
                    {
                        if (isUnix()) sh './gradlew build'
                        else bat 'gradlew build'
                    }
                }
            }			
        }
        
        stage("Archive Artifacts + Javadoc + Tests")
        {
            parallel
            {
                stage('Javadoc Generation + Publish')
                {
                    steps
                    {
                        echo 'Generating Javadoc..'
                        dir("${workPath}")
                        {
                            script
                            {
                                if (isUnix()) sh './gradlew javadoc'
                                else bat 'gradlew javadoc'
                            }

                            step([$class: 'JavadocArchiver', javadocDir: "build/docs/javadoc", keepAll: false])
                        }
                    }	
                }
                
                stage('Archiving Artifacts')
                {
                    steps
                    {
                        echo 'Archiving Artefacts..'
                        dir("${workPath}")
                        {
                            archiveArtifacts artifacts: "build/libs/*.war", fingerprint: true, onlyIfSuccessful: true
                        }
                    }
                }

                stage('Unit Tests')
                {
                    steps
                    {
                        echo 'Unit Testing..'
                        dir("${workPath}")
                        {
                            script{
                                if (isUnix()) sh './gradlew test jacocoTestReport'
                                else bat 'gradlew test jacocoTestReport'
                            }

                            junit allowEmptyResults: true, testResults: "build/test-results/test/*.xml"
                            jacoco classPattern: "build/classes", exclusionPattern: '**/*Test*.class', execPattern: "build/jacoco/test.exec", sourceExclusionPattern: '**/*Test*.java', sourcePattern: "src/main/java"
                        }
                    }	
                }
                
                stage('Integration Tests')
                {
                    steps
                    {
                        echo 'Integration Testing..'
                        dir("${workPath}")
                        {
                            script
                            {
                                if (isUnix()) sh './gradlew integrationTest jacocoIntegrationReport'
                                else bat 'gradlew integrationTest jacocoIntegrationReport'
                            }

                            junit allowEmptyResults: true, testResults: "build/test-results/integrationTest/*.xml"
                            jacoco classPattern: "build/classes", exclusionPattern: '**/*Test*.class', execPattern: "build/jacoco/integrationTest.exec", sourceExclusionPattern: '**/*Test*.java', sourcePattern: "src/main/java"
                        }
                    }	
                }

                stage('Mutation Tests')
                {
                    steps
                    {
                        echo 'Mutation Testing..'
                        dir("${workPath}")
                        {
                            script
                            {
                                if (isUnix()) sh './gradlew pitest'
                                else bat 'gradlew pitest'
                            }

                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: "build/reports/pitest", reportFiles: 'index.html', reportName: 'Mutation Report', reportTitles: 'Mutation Report'])
                        }
                    }	
                }
            }
        }

        stage('Deploy for Testing')
        {
            steps
            {
                echo 'Deploy App..'
                dir("${workPath}")
                {
                    script
                    {
                        //bound 2 change
                        if (isUnix()) sh './gradlew deploy --info && %CATALINA_HOME%/bin/startup.sh' //check if works. ex -> echo $TEST_VAR
                        else bat 'gradlew deploy --info && %CATALINA_HOME%/bin/startup.bat'

                        //bat 'docker build -f Dockerfile -t cmsproject .'
                        //bat 'docker run -p 8888:8080 -t cmsproject'
                    }
                }
            }
        }

        stage('System Smoke Tests')
        {
            options{ retry(5) }
            
            steps
            {
                echo 'System Testing..'
                sleep(3)

                dir("${workPath}")
                {
                    script
                    {
                        if (isUnix()) sh 'curl http://localhost:8080/cmsProject'
                        else powershell 'Invoke-RestMethod -Uri http://localhost:8080/cmsProject'
                    }
                }                
            }
        }

        stage('Manual UI Acceptance Tests')
        {
            options{ timeout(time: 1, unit: 'HOURS') }
            steps
            {
                mail (to: '1140953@isep.ipp.pt 1141233@isep.ipp.pt', subject: "Manual Tests", body: "Please do some testing and approve the build on jenkins. CHOP CHOP! Get to work!")
                //input 'Please Approve or fail the build after UI Acceptance Tests'

/*
                withCredentials([[$class: 'UsernamePasswordMultiBinding',
                credentialsId: "${credentials}",
                usernameVariable: 'GIT_USERNAME', 
                passwordVariable: 'GIT_PASSWORD']]) {

                    script 
                    {
                        dir("${workPath}"){
                            if (isUnix()) 
                            {
                                sh "git tag release"
                                sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} --tags"
                            } 
                            else 
                            {
                                powershell "git tag Build#${BUILD_NUMBER}-${currentBuild.currentResult}"
                                powershell "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} --tags"
                            }
                        }
                        
                    }
                }
*/
            }
        }

        stage('Deploy Release')
        {
            when { tag "release-*" }
            steps
            {
                echo 'Deploy App in Release Environment..'
                //dir("${workPath}")
                //{
                    //script
                    //{
                        //bound 2 change
                        
                        //if (isUnix()) sh './gradlew deploy --info && %CATALINA_HOME%/bin/startup.sh' //check if works. ex -> echo $TEST_VAR
                        //else bat 'gradlew deploy --info && %CATALINA_HOME%/bin/startup.bat'

                        //bat 'docker build -f Dockerfile -t cmsproject .'
                        //bat 'docker run -p 8888:8080 -t cmsproject'
                    //}
                //}
            }
        }

    }

    post
    {
        //success { discordSend description: 'Jenkins Pipeline Project Build - SUCCESS', result: currentBuild.currentResult, image: 'https://media.giphy.com/media/fQogXfHt0uIgyOCXDo/giphy.gif', webhookURL: "${discordWebHook}" }
        //failure { discordSend description: 'Jenkins Pipeline Project Build - FAILURE', result: currentBuild.currentResult, image: 'https://media.giphy.com/media/NTur7XlVDUdqM/giphy.gif', webhookURL: "${discordWebHook}" }

        always
        {
            bitbucketStatusNotify(buildState: currentBuild.currentResult)

            discordSend description: "Jenkins CMS Pipeline - Finished Build #${BUILD_NUMBER}\nBuild Status: ${currentBuild.currentResult}", result: currentBuild.currentResult, webhookURL: "${discordWebHook}"
            
/*
            withCredentials([[$class: 'UsernamePasswordMultiBinding',
                credentialsId: "${credentials}",
                usernameVariable: 'GIT_USERNAME', 
                passwordVariable: 'GIT_PASSWORD']]) {

                script 
                {
                    dir("${workPath}"){
                        if (isUnix()) 
                        {
                            sh "git tag Build#${BUILD_NUMBER}-${currentBuild.currentResult}"
                            sh "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} --tags"
                        } 
                        else 
                        {
                            powershell "git tag Build#${BUILD_NUMBER}-${currentBuild.currentResult}"
                            powershell "git push https://${GIT_USERNAME}:${GIT_PASSWORD}@${repoUrl} --tags"
                        }
                    }
                }
            }
*/
        }

    }
}